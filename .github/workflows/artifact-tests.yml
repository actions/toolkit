name: artifact-unit-tests
on:
  push:
    paths:
        - 'packages/artifact/**'
  pull_request:
    paths:
        - 'packages/artifact/**'

jobs:

  build:
    name: Build

    strategy:
      matrix:
        runs-on: [ubuntu-latest, windows-latest, macOS-latest]
      fail-fast: false

    runs-on: ${{ matrix.runs-on }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x

    # Need root node_modules because certain npm packages like jest are configured for the entire repository and it won't be possible
    # without these to just compile the artifacts package
    - name: Install root npm packages
      run: npm install

    - name: Compile artifact package
      run: |
        npm install
        tsc
      working-directory: packages/artifact

    - name: Create files that will be uploaded
      run: |
        mkdir artifact-path
        echo "hello" > artifact-path/world.txt
        echo "Some large amount of text that has a compression ratio that is greater than 100%. If greater than 100%, gzip is used to upload the file" > artifact-path/gzip.txt

    # Certain env variables are needed in order to make the necessary API calls. These env variables are not available in a standard shell but they
    # are available for actions written in node. We're using a hack here to get the necessary env variables from a different context
    - name: Get ACTIONS_RUNTIME_TOKEN env variable
      uses: konradpabjan/Get-Actions-Env-Variable-From-Node-Context@4a3142ee3e
      with:
        EnvName: ACTIONS_RUNTIME_TOKEN
      id: get_runtime_token

    - name: Get ACTIONS_RUNTIME_URL env variable
      uses: konradpabjan/Get-Actions-Env-Variable-From-Node-Context@4a3142ee3e
      with:
        EnvName: ACTIONS_RUNTIME_URL
      id: get_runtime_url

    - name: Get GITHUB_RUN_ID env variable
      uses: konradpabjan/Get-Actions-Env-Variable-From-Node-Context@4a3142ee3e
      with:
        EnvName: GITHUB_RUN_ID
      id: get_run_id

    - name: Set env variables
      run: |
        echo "::set-env name=ACTIONS_RUNTIME_TOKEN::${{ steps.get_runtime_token.outputs.EnvValue }}"
        echo "::set-env name=ACTIONS_RUNTIME_URL::${{ steps.get_runtime_url.outputs.EnvValue }}"
        echo "::set-env name=GITHUB_RUN_ID::${{ steps.get_run_id.outputs.EnvValue }}"

    # We're using node -e to call the functions directly available in the @actions/artifact package
    - name: Upload artifacts using uploadArtifact()
      run: |
        node -e "Promise.resolve(require('./packages/artifact/lib/artifact-client').create().uploadArtifact('my-artifact-1',['artifact-path/world.txt'], '${{ github.workspace }}'))"
        node -e "Promise.resolve(require('./packages/artifact/lib/artifact-client').create().uploadArtifact('my-artifact-2',['artifact-path/gzip.txt'], '${{ github.workspace }}'))"

    - name: Download artifacts using downloadArtifact()
      run: |
        mkdir artifact-1-directory
        node -e "Promise.resolve(require('./packages/artifact/lib/artifact-client').create().downloadArtifact('my-artifact-1','artifact-1-directory'))"
        mkdir artifact-2-directory
        node -e "Promise.resolve(require('./packages/artifact/lib/artifact-client').create().downloadArtifact('my-artifact-2','artifact-2-directory'))"
    
    - name: Verify downloadArtifact()
      run: |
        $file1 = "artifact-1-directory/artifact-path/world.txt"
        if(!(Test-Path -path $file1))
        {
            Write-Error "artifact-1-directory/artifact-path/world.txt file does not exist"
        }
        if(!((Get-Content $file1) -ceq 'hello'))
        {
            cat $file1
            Write-Error "File contents of world.txt are incorrect"
        }

        $file2 = "artifact-2-directory/artifact-path/gzip.txt"
        if(!(Test-Path -path $file2))
        {
            Write-Error "artifact-2-directory/artifact-path/gzip.txt does not exist"
        }
        if(!((Get-Content $file2) -ceq 'Some large amount of text that has a compression ratio that is greater than 100%. If greater than 100%, gzip is used to upload the file'))
        {
            cat $file2
            Write-Error "File contents of gzip.txt are incorrect"
        }
      shell: pwsh

    - name: Download artifacts using downloadAllArtifacts()
      run: |
        mkdir multi-artifact-directory
        node -e "Promise.resolve(require('./packages/artifact/lib/artifact-client').create().downloadAllArtifacts('multi-artifact-directory'))"

    - name: Verify downloadAllArtifacts() 
      run: |
        $file1 = "multi-artifact-directory/my-artifact-1/artifact-path/world.txt"
        if(!(Test-Path -path $file1))
        {
            Write-Error "multi-artifact-directory/my-artifact-1/artifact-path/world.txt file does not exist"
        }
        if(!((Get-Content $file1) -ceq 'hello'))
        {
            cat $file1
            Write-Error "File contents of world.txt are incorrect"
        }

        $file2 = "multi-artifact-directory/my-artifact-2/artifact-path/gzip.txt"
        if(!(Test-Path -path $file2))
        {
            Write-Error "multi-artifact-directory/my-artifact-2/artifact-path/gzip.txt does not exist"
        }
        if(!((Get-Content $file2) -ceq 'Some large amount of text that has a compression ratio that is greater than 100%. If greater than 100%, gzip is used to upload the file'))
        {
            cat $file2
            Write-Error "File contents of gzip.txt are incorrect"
        }
      shell: pwsh

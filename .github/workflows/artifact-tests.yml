name: artifact-unit-tests
on: push

jobs:
  build:
    name: Build

    strategy:
      matrix:
        runs-on: [ubuntu-latest]
      fail-fast: false

    runs-on: ${{ matrix.runs-on }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x
    
    - run: node test.js

    # Need root node_modules because certain npm packages like jest are configured for the entire repository and it won't be possible
    # without these to just compile the artifacts package
    - name: Install root npm packages
      run: npm ci

    - name: Compile artifact package
      run: |
        npm ci
        npm run tsc
      working-directory: packages/artifact
    
    - name: Set artifact file contents
      run: |
        echo "::set-env name=non-gzip-artifact-content::hello"
        echo "::set-env name=gzip-artifact-content::Some large amount of text that has a compression ratio that is greater than 100%. If greater than 100%, gzip is used to upload the file"

    - name: Create files that will be uploaded
      run: |
        mkdir artifact-path 
        echo ${{ env.non-gzip-artifact-content }} > artifact-path/world.txt
        echo ${{ env.gzip-artifact-content }} > artifact-path/gzip.txt

    # Certain env variables are needed in order to make the necessary API calls. These env variables are not available in a standard shell but they
    # are available for actions written in node. We're using a hack here to get the necessary env variables from a different context
    - name: Get ACTIONS_RUNTIME_TOKEN env variable
      uses: konradpabjan/Get-Actions-Env-Variable-From-Node-Context@4a3142ee3e
      with:
        EnvName: ACTIONS_RUNTIME_TOKEN
      id: get_runtime_token

    - name: Get ACTIONS_RUNTIME_URL env variable
      uses: konradpabjan/Get-Actions-Env-Variable-From-Node-Context@4a3142ee3e
      with:
        EnvName: ACTIONS_RUNTIME_URL
      id: get_runtime_url

    - name: Get GITHUB_RUN_ID env variable
      uses: konradpabjan/Get-Actions-Env-Variable-From-Node-Context@4a3142ee3e
      with:
        EnvName: GITHUB_RUN_ID
      id: get_run_id

    # The env variables that were retrieved in a different step need to be set for each subsequent shell or upload/download will fail
    - name: Set env variables
      run: |
        echo "::set-env name=ACTIONS_RUNTIME_TOKEN::${{ steps.get_runtime_token.outputs.EnvValue }}"
        echo "::set-env name=ACTIONS_RUNTIME_URL::${{ steps.get_runtime_url.outputs.EnvValue }}"
        echo "::set-env name=GITHUB_RUN_ID::${{ steps.get_run_id.outputs.EnvValue }}"

    # We're using node -e to call the functions directly available in the @actions/artifact package
    - name: Upload artifacts using uploadArtifact()
      run: |
        node -e "Promise.resolve(require('./packages/artifact/lib/artifact-client').create().uploadArtifact('my-artifact-1',['artifact-path/world.txt'], '${{ github.workspace }}'))"
        node -e "Promise.resolve(require('./packages/artifact/lib/artifact-client').create().uploadArtifact('my-artifact-2',['artifact-path/gzip.txt'], '${{ github.workspace }}'))"

    - name: Download artifacts using downloadArtifact()
      run: |
        mkdir artifact-1-directory
        node -e "Promise.resolve(require('./packages/artifact/lib/artifact-client').create().downloadArtifact('my-artifact-1','artifact-1-directory'))"
        mkdir artifact-2-directory
        node -e "Promise.resolve(require('./packages/artifact/lib/artifact-client').create().downloadArtifact('my-artifact-2','artifact-2-directory'))"
    
    - name: Verify downloadArtifact()
      shell: bash
      run: |
        scripts/test-artifact-file.sh "artifact-1-directory/artifact-path/world.txt" "${{ env.non-gzip-artifact-content }}"
        scripts/test-artifact-file.sh "artifact-2-directory/artifact-path/gzip.txt" "${{ env.gzip-artifact-content }}"

    - name: Download artifacts using downloadAllArtifacts()
      run: |
        mkdir multi-artifact-directory
        node -e "Promise.resolve(require('./packages/artifact/lib/artifact-client').create().downloadAllArtifacts('multi-artifact-directory'))"

    - name: Verify downloadAllArtifacts()
      shell: bash
      run: |
        scripts/test-artifact-file.sh "multi-artifact-directory/my-artifact-1/artifact-path/world.txt" "${{ env.non-gzip-artifact-content }}"
        scripts/test-artifact-file.sh "multi-artifact-directory/my-artifact-2/artifact-path/gzip.txt" "${{ env.gzip-artifact-content }}"